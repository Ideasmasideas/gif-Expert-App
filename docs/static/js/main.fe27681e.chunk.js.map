{"version":3,"sources":["components/AddCategory.js","helper/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","prototype","PropTypes","func","isRequired","getGifs","category","a","apiUrl","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","url","images","downsized_medium","GifGridItem","className","key","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"sPAIaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAmBhD,OACI,0BAAMC,SATW,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACtCN,EAAc,OAMhB,2BACEO,KAAK,OACLC,MAAQT,EACRU,SAlBkB,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,YAwB/BZ,EAAYe,UAAY,CACpBd,c,OAAee,EAAUC,KAAKC,Y,2BCpCrBC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,0FAC6EC,UAAUH,GADvF,sBAEAI,MAAQF,GAFR,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KACFC,EAAOD,EAAKE,KAAK,SAAAC,GAAS,IAAD,EAC3B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXC,IAAG,UAACH,EAAII,cAAL,aAAC,EAAYC,iBAAiBF,QARtB,kBAWZL,GAXY,4CAAH,sDCYLQ,EAVK,SAAC,GAAsB,IAApBL,EAAmB,EAAnBA,GAAGC,EAAgB,EAAhBA,MAAMC,EAAU,EAAVA,IAC5B,OACI,yBAAKI,UAAU,4DACZ,wBAAIC,IAAOP,GACX,yBAAKQ,IAAMN,EAAMO,IAAMR,KACvB,2BAAKA,KCHHS,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAAe,ECAb,SAACA,GAAc,IAAD,EACVlB,mBAAS,IADC,gCAEZA,mBAAS,CAC/ByB,KAAM,GACNe,SAAS,KAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAiB1C,OAVMC,qBAAW,WACT1B,EAAQC,GACP0B,MAAM,SAAAC,GACHH,EAAS,CACLjB,KAAMoB,EACNL,SAAQ,SAGlB,CAAEtB,IAEDuB,EDd8BK,CAAc5B,GAAlCc,EAHwB,EAG7BP,KAAae,EAHgB,EAGhBA,QACrB,OACI,oCACA,gCAAOtB,EAAP,KACEsB,GAAW,wCACT,yBAAKL,UAAU,aAGPH,EAAOL,KAAK,SAAAC,GAAG,OACf,kBAAC,EAAD,eACAQ,IAAMR,EAAIC,IACLD,UEZZmB,EAAe,WAAO,IAAD,EACK/C,mBAAS,IADd,mBACvBgD,EADuB,KACZjD,EADY,KAG9B,OACI,oCACI,6CACA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BAEA,4BAEQiD,EAAWrB,KAAI,SAAAT,GAAQ,OACnB,kBAAC,EAAD,CAASA,SAAWA,EAAWkB,IAAKlB,U,MCX5D+B,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,W","file":"static/js/main.fe27681e.chunk.js","sourcesContent":["import React,{ useState} from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport const AddCategory = ( { setCategories } ) => {\n    const [inputValue, setInputValue] = useState('')\n\n\n    //Funcion que nos sirve para poner en el campo de texto lo que esta \n    //escribiendo el usuario\n    const handleInputChange = (e)=>{\n        setInputValue(e.target.value)\n    }\n\n    //Envia la informacion que esta en el campo de texto\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if(inputValue.trim().length > 2){\n            setCategories( cats => [inputValue,...cats]);\n            setInputValue('');\n\n        }\n    }\n    return (\n        <form onSubmit={ handleSubmit }>\n          <input\n            type=\"text\"\n            value={ inputValue } \n            onChange={ handleInputChange }\n\n          />\n        </form>\n    )\n}\n\nAddCategory.prototype = {\n    setCategories: PropTypes.func.isRequired\n}\n","export const getGifs = async (category) =>{\n    const apiUrl=`https://api.giphy.com/v1/gifs/search?api_key=hQZ6FSpTrJJ1COuGVe0j2f9ZptzJ1Ak4&q=${encodeURI(category)}&limit=10`\n    const resp = await fetch ( apiUrl );\n    const { data } = await resp.json();\n    const gifs = data.map( img  => {\n        return {\n            id: img.id,\n            title: img.title,\n            url:img.images?.downsized_medium.url\n        }\n    })\n    return gifs;\n}","import React from 'react'\n\nconst GifGridItem = ({ id,title,url }) => {\n    return (\n        <div className=\"card animate__animated animate__fadeIn animate__delay-1s\">\n           <li key = {id}> \n           <img src={ url } alt={ title } /></li> \n           <p>{ title }</p> \n        </div>\n    )\n}\n\nexport default GifGridItem\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport GifGridItem from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n    //uso los dos puntos para renombrar data\n    const { data:images, loading } = useFetchGifs( category );\n    return (\n        <>\n        <h3> { category } </h3>\n        { loading && <p> Loading </p> }\n            <div className=\"card-grid\">\n\n                {\n                    images.map( img =>(\n                    <GifGridItem \n                    key={ img.id }\n                    { ...img } />\n                    ))               \n                }   \n\n            </div>\n        </>\n    )\n}\n","import { useState,useEffect } from 'react'\nimport { getGifs } from '../helper/getGifs'\n\n\nexport const useFetchGifs = (category) => {\n    const [images, setImages] = useState([]);\n    const [state, setstate] = useState({\n        data: [],\n        loading: true\n      });\n\n      useEffect( ()=>{\n        getGifs(category)\n        .then (imgs =>{\n            setstate({\n                data: imgs,\n                loading:false    \n            });\n        });\n    },[ category ])\n\nreturn state //data:[], loading: true;\n    }\n\n\n","import React,{useState} from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\n\n\nexport const GifExpertApp = () => {\n    const [categories,setCategories] = useState([]);\n    \n    return (\n        <>\n            <h2>GifExpert App</h2>\n            <AddCategory setCategories={ setCategories}/>\n            <hr/>\n            \n            <ol>\n                {\n                    categories.map(category => (\n                        <GifGrid category={ category } key={category}/>\n                    ))\n                }\n            </ol>\n        </>\n    )\n}\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\n\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}